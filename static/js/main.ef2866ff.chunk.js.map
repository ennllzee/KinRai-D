{"version":3,"sources":["img/Logo1.png","components/Navbar.jsx","components/Login.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","role","aria-label","href","id","username","onClick","logout","Login","state","email","password","currentUser","this","align","width","src","logo","alt","onSubmit","htmlFor","type","name","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,qMCgC5BC,MA9Bf,SAAgBC,GACb,OACI,yBAAKC,UAAU,SAASC,KAAK,aAAaC,aAAW,mBACjD,yBAAKF,UAAU,gBACX,uBAAGA,UAAU,cAAcG,KAAK,KAAhC,iBAIJ,yBAAKC,GAAG,qBAAqBJ,UAAU,eACnC,yBAAKA,UAAU,iBAGf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,WACX,wBAAIA,UAAU,eACTD,EAAMM,UAEX,4BAAQL,UAAU,kBAAkBM,QAASP,EAAMQ,QAAnD,gBCiDZC,G,wDA7DX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IAEDU,MAAQ,CACTC,MAAQ,GACRC,SAAW,GACXC,YAAc,MANH,E,qDAYf,IAAMA,EAAcC,KAAKJ,MAAMG,YAC/B,OAAIA,EAEI,6BACA,kBAAC,EAAD,CAAQP,SAAYO,EAAYF,SAKhC,6BAASV,UAAU,qBACf,2BAAOc,MAAM,SAASC,MAAM,OACxB,4BACI,wBAAID,MAAM,UACN,yBAAKE,IAAKC,IAAMC,IAAI,iBAAiBH,MAAM,SAE/C,wBAAIA,MAAM,OACN,0BAAMI,SAAUN,KAAKM,UACjB,yBAAKnB,UAAU,SACX,2BAAOA,UAAU,QAAQoB,QAAQ,IAAjC,SACI,yBAAKpB,UAAU,WACX,2BAAOA,UAAU,QAAQqB,KAAK,QAAQC,KAAK,QAAQC,SAAUV,KAAKU,aAI9E,yBAAKvB,UAAU,SACX,2BAAOA,UAAU,QAAQoB,QAAQ,IAAjC,YACA,yBAAKpB,UAAU,WACX,2BAAOA,UAAU,QAAQqB,KAAK,WAAWC,KAAK,WAAWC,SAAUV,KAAKU,aAIhF,yBAAKvB,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQA,UAAU,kBAAlB,oB,GA/CxBwB,IAAMC,YCKXC,MARf,WACE,OACE,yBAAK1B,UAAU,aACb,kBAAC,EAAD,QCMc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef2866ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo1.be9103a0.png\";","import React from 'react'\r\n \r\nfunction Navbar(props) {\r\n   return (\r\n       <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n           <div className=\"navbar-brand\">\r\n               <a className=\"navbar-item\" href=\"/\">\r\n                   Firebase App\r\n               </a>\r\n           </div>\r\n           <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n               <div className=\"navbar-start\">\r\n \r\n               </div>\r\n               <div className=\"navbar-end\">\r\n                   <div className=\"navbar-item\">\r\n                       <div className=\"buttons\">\r\n                           <h3 className=\"navbar-item\">\r\n                               {props.username}\r\n                           </h3>\r\n                           <button className=\"button is-light\" onClick={props.logout}>\r\n                               Logout\r\n                           </button>\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n           </div>\r\n       </nav>\r\n \r\n   )\r\n}\r\n \r\nexport default Navbar\r\n","import React from 'react'\r\nimport logo from '../img/Logo1.png';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\n\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            email : '',\r\n            password : '',\r\n            currentUser : null\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const currentUser = this.state.currentUser\r\n        if (currentUser){\r\n            return(\r\n                <div>\r\n                <Navbar username = {currentUser.email} />\r\n                </div>\r\n            )\r\n        } else {\r\n            return(\r\n                <section className=\"section container\">\r\n                    <table align=\"center\" width=\"80%\">\r\n                        <tr>\r\n                            <td align=\"center\">\r\n                                <img src={logo} alt=\"kin-rai-d-logo\" width=\"50%\"/>\r\n                            </td>\r\n                            <td width=\"40%\" >\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\" htmlFor=\"\">Email</label>\r\n                                            <div className=\"control\">\r\n                                                <input className=\"input\" type=\"email\" name=\"email\" onChange={this.onChange} ></input>\r\n                                            </div>\r\n                                    </div>\r\n                \r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\" htmlFor=\"\">Password</label>\r\n                                        <div className=\"control\">\r\n                                            <input className=\"input\" type=\"password\" name=\"password\" onChange={this.onChange}></input>\r\n                                        </div>\r\n                                    </div>\r\n                \r\n                                    <div className=\"field is-grouped\">\r\n                                        <div className=\"control\">\r\n                                            <button className=\"button is-link\">Login</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </form>\r\n                                \r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                             \r\n                </section>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}