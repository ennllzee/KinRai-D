{"version":3,"sources":["img/Logo1.png","components/Login.jsx","components/Register.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Login","props","state","username","password","currentUser","className","align","width","src","logo","alt","htmlFor","type","name","to","Component","Register","id","App","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,mC,iOCKtBC,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,SAAW,GACXC,SAAW,GACXC,YAAc,MANH,E,qDAYf,OACI,6BAASC,UAAU,qBACX,2BAAOC,MAAM,UACT,4BACI,wBAAIA,MAAM,SAASC,MAAM,OACrB,yBAAKC,IAAKC,IAAMC,IAAI,GAAGH,MAAM,SAEjC,4BACA,4CACA,8BAEI,yBAAKF,UAAU,SACX,2BAAOA,UAAU,QAAQM,QAAQ,IAAjC,YACA,yBAAKN,UAAU,WACX,2BAAOA,UAAU,QAAQO,KAAK,WAAWC,KAAK,eAItD,yBAAKR,UAAU,SACX,2BAAOA,UAAU,QAAQM,QAAQ,IAAjC,YACA,yBAAKN,UAAU,WACX,2BAAOA,UAAU,QAAQO,KAAK,WAAWC,KAAK,eAItD,yBAAKR,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQA,UAAU,kBAAlB,YAKZ,kBAAC,IAAD,CAAMS,GAAG,aAAT,6B,GA9COC,a,OCDpB,SAASC,IAElB,OACM,6BAASX,UAAU,qBACX,2BAAOC,MAAM,UACT,4BACI,wBAAIA,MAAM,SAASC,MAAM,OACrB,yBAAKC,IAAKC,IAAMC,IAAI,GAAGH,MAAM,SAEjC,4BACA,4CACA,8BAEI,yBAAKF,UAAU,SACX,2BAAOA,UAAU,QAAQM,QAAQ,IAAjC,gBACA,yBAAKN,UAAU,WACX,2BAAOA,UAAU,QAAQO,KAAK,WAAWC,KAAK,eAItD,yBAAKR,UAAU,SACX,2BAAOA,UAAU,QAAQM,QAAQ,IAAjC,gBACA,yBAAKN,UAAU,WACX,2BAAOA,UAAU,QAAQO,KAAK,WAAWC,KAAK,oBAItD,yBAAKR,UAAU,SACX,2BAAOA,UAAU,QAAQM,QAAQ,IAAjC,gBACA,yBAAKN,UAAU,WACX,2BAAOA,UAAU,QAAQO,KAAK,WAAWC,KAAK,oBAItD,yBAAKR,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQA,UAAU,iBAAiBY,GAAG,OAAtC,aAKZ,kBAAC,IAAD,CAAMH,GAAG,cAAT,qB,ICtCPI,E,uKAEjB,OACE,kBAAC,IAAD,KACA,yBAAKb,UAAU,uBACb,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,aAAaC,OAAS,SAAArB,GAAK,OAC3C,6BACA,kBAAC,EAAD,UAGF,kBAAC,IAAD,CAAOoB,KAAK,YAAYE,UAAWN,U,GAVVD,aCKbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.599eaf15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo1.48e0803d.png\";","import React, { Component } from 'react'\r\nimport logo from '../img/Logo1.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username : '',\r\n            password : '',\r\n            currentUser : null,\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"section container\">\r\n                    <table align=\"center\">\r\n                        <tr>\r\n                            <td align=\"center\" width=\"60%\">\r\n                                <img src={logo} alt=\"\" width=\"200\"/>\r\n                            </td>\r\n                            <td>\r\n                            <h1>Kin Rai - D </h1>\r\n                            <form >\r\n                                \r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">Username</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"username\" name=\"username\"></input>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">Password</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"password\" name=\"password\"></input>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                                <div className=\"field is-grouped\">\r\n                                    <div className=\"control\">\r\n                                        <button className=\"button is-link\">Login</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </form>\r\n                            <Link to=\"/register\">\r\n                            Click to Register\r\n                            </Link>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                </section>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport logo from '../img/Logo1.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Register() {\r\n  \r\n      return (\r\n            <section className=\"section container\">\r\n                    <table align=\"center\">\r\n                        <tr>\r\n                            <td align=\"center\" width=\"60%\">\r\n                                <img src={logo} alt=\"\" width=\"200\"/>\r\n                            </td>\r\n                            <td>\r\n                            <h1>Kin Rai - D </h1>\r\n                            <form>\r\n                                \r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">New Username</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"username\" name=\"new user\"></input>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">New Password</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"password\" name=\" new password\"></input>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">New Password</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"password\" name=\" new password\"></input>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                                <div className=\"field is-grouped\">\r\n                                    <div className=\"control\">\r\n                                        <button className=\"button is-link\" id=\"new\">Submit</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </form>\r\n                            <Link to=\"/KinRai-D/\">\r\n                                Back to Login\r\n                            </Link>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                </section>\r\n        )\r\n    \r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport {v4} from 'uuid';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Register from './components/Register';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className=\"container mt-4 mb-5\">\n        <Route exact path=\"/KinRai-D/\" render={ props => (\n          <div>\n          <Login/>\n          </div>\n        )} />\n        <Route path=\"/register\" component={Register} />        \n      </div>\n      </Router>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}