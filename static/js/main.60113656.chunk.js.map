{"version":3,"sources":["img/Logo1.png","components/Navbar.jsx","components/Result.jsx","components/Random.jsx","components/Login.jsx","components/Register.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","role","aria-label","id","align","onClick","logout","username","Result","now","Random","state","list","hate","num","onSubmit","e","preventDefault","length","window","alert","document","getElementById","style","display","rannum","Math","floor","random","includes","setState","consider","comfirm","addHates","concat","clearhate","this","type","Component","Login","onChange","target","name","value","password","currentUser","bind","width","src","logo","alt","htmlFor","to","Register","newuser","newpassword","confirm","App","exact","path","render","component","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60113656.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo1.48e0803d.png\";","import React from 'react'\r\n \r\nfunction Navbar(props) {\r\n   return (\r\n       <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\r\n\r\n           <div id=\"navbarBasicExample\" className=\"navbar-menu\" align=\"right\">\r\n               <div className=\"navbar-start\">\r\n \r\n               </div>\r\n               <div className=\"navbar-end\">\r\n                   <div className=\"navbar-item\" >\r\n                       <div className=\"buttons\">\r\n                           \r\n                           <button className=\"button is-light\" onClick={props.logout}>\r\n                                {props.username},Logout\r\n                           </button>\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n           </div>\r\n       </nav>\r\n \r\n   )\r\n}\r\n \r\nexport default Navbar\r\n","import React, { Component } from 'react'\r\n\r\nfunction Result(props) {\r\n\r\n        return (\r\n                <div align=\"center\"><h1>Let's eat</h1><br/><h3>{props.now}</h3></div>\r\n        )\r\n    \r\n}\r\n\r\nexport default Result","import React, { Component } from 'react'\r\nimport Result from './Result'\r\n\r\nexport default class Random extends Component {\r\n    \r\n    state = {\r\n        list: this.props.list,\r\n        hate: this.props.hate,\r\n        now: '',\r\n        num: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.hate.length===this.state.list.length){\r\n            window.alert('Sorry... We do not have any dishes for you T.T')\r\n            document.getElementById(\"random_form\").style.display = \"none\";\r\n            document.getElementById(\"hate_form\").style.display = \"none\";\r\n            document.getElementById(\"confirm_form\").style.display = \"none\";\r\n            return false\r\n        }else{\r\n            var rannum = Math.floor(Math.random()*this.state.list.length)\r\n            if(this.state.hate.includes(rannum)){\r\n                return this.onSubmit\r\n            }else{\r\n                this.setState({\r\n                    now: this.state.list[rannum],\r\n                    num: rannum\r\n                })\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    consider = (e) =>{\r\n        \r\n    }\r\n\r\n    comfirm = (e) =>{\r\n        if(this.state.now){\r\n            e.preventDefault()\r\n            document.getElementById(\"random_form\").style.display = \"none\";\r\n            document.getElementById(\"hate_form\").style.display = \"none\";\r\n            document.getElementById(\"confirm_form\").style.display = \"none\";\r\n            document.getElementById(\"rehate_form\").style.display = \"none\";\r\n            window.alert('Enjoy your meal!')\r\n        }  \r\n    }\r\n\r\n\r\n    addHates = (e) => {\r\n        e.preventDefault()\r\n        if(this.state.now){\r\n            this.setState({\r\n                now: '',\r\n                hate: this.state.hate.concat([this.state.num])  \r\n            })\r\n        }\r\n    }\r\n\r\n    clearhate = (e) => {\r\n        e.preventDefault()\r\n        this.setState({\r\n            hate: ''\r\n        })\r\n        document.getElementById(\"random_form\").style.display = \"block\";\r\n        document.getElementById(\"hate_form\").style.display = \"block\";\r\n        document.getElementById(\"confirm_form\").style.display = \"block\";\r\n        window.alert('Success Clear Hate list')\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            \r\n            <div className=\"container mt-4 mb-5\">\r\n            <section className=\"section container\">\r\n            <div><Result now={this.state.now}/></div>\r\n                \r\n                <form id=\"random_form\" onSubmit={this.onSubmit}>\r\n    \r\n                                <div className=\"field is-grouped\" align=\"center\">\r\n                                    <div className=\"control\">\r\n                                        <button type=\"submit\" className=\"button is-link\">Random</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                </form>\r\n                <form id=\"hate_form\" onSubmit={this.addHates}>\r\n    \r\n                                <div className=\"field is-grouped\" align=\"center\">\r\n                                    <div className=\"control\">\r\n                                        <button type=\"submit\" className=\"button is-link\">Hate this Dish</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                </form>\r\n                <form id=\"confirm_form\" onSubmit={this.comfirm}>\r\n    \r\n                                <div className=\"field is-grouped\" align=\"center\">\r\n                                    <div className=\"control\">\r\n                                        <button type=\"submit\" className=\"button is-link\">I will have this dish</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                </form>\r\n                <form id=\"rehate_form\" onSubmit={this.clearhate}>\r\n    \r\n                                <div className=\"field is-grouped\" align=\"center\">\r\n                                    <div className=\"control\">\r\n                                        <button type=\"submit\" className=\"button is-link\">Clear Hate List</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                </form>\r\n            \r\n            </section>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n","import React, { Component } from 'react'\r\nimport logo from '../img/Logo1.png'\r\nimport { Link } from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport Random from './Random';\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username:'',\r\n            password:'',\r\n            currentUser: null,\r\n            list: [],\r\n            hate: []\r\n        }\r\n        this.logout = this.logout.bind(this)\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState( { [e.target.name]: e.target.value } );\r\n    }\r\n    \r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (!this.state.username || !this.state.password) {\r\n            window.alert('Wrong username or password, Try again.');\r\n            return false;\r\n        }else{ //เพิ่มการตรวจสอบ ถ้ามี username และ password ที่ตรงกับ input ->\r\n            //const list = [] //ทำการดึงข้อมูลจาก database มา ทุก collection ปล. firebase ใช้ loop for each ในการดึงข้อมูล \r\n            //const hate = []\r\n            this.setState({\r\n\r\n                currentUser: this.state,\r\n                list: ['Rice', 'Noodle', 'Steak', 'Salad']\r\n                //hate:\r\n\r\n            })\r\n\r\n        } /*else { //กรณีที่หาไม่เจอ\r\n            window.alert('Wrong username or password, Try again.');\r\n            return false;\r\n        }\r\n        */\r\n    }\r\n\r\n    logout(){\r\n        this.setState({\r\n            username:'',\r\n            password:'',\r\n            currentUser: null,\r\n            list: [],\r\n            hate: []\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {currentUser} = this.state\r\n        if(currentUser){\r\n            return(\r\n                <div>\r\n                    <Navbar username = {currentUser.username} logout = {this.logout}  />\r\n                    <Random list = {this.state.list} hate = {this.state.hate} />\r\n                </div>\r\n            )\r\n            \r\n        }else{\r\n            return (\r\n                <section className=\"section container\">\r\n                        <table align=\"center\">\r\n                            <tr>\r\n                                <td align=\"center\" width=\"60%\">\r\n                                    <img src={logo} alt=\"\" width=\"200\"/>\r\n                                </td>\r\n                                <td>\r\n                                <h1>Kin Rai - D </h1>\r\n                                <form id=\"login_form\" onSubmit={this.onSubmit}>\r\n                                    \r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\" htmlFor=\"\">Username</label>\r\n                                        <div className=\"control\">\r\n                                            <input className=\"input\" type=\"text\" name=\"username\" onChange={this.onChange} value={this.state.username}></input>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <div className=\"field\">\r\n                                        <label className=\"label\" htmlFor=\"\">Password</label>\r\n                                        <div className=\"control\">\r\n                                            <input className=\"input\" type=\"password\" name=\"password\" onChange={this.onChange} value={this.state.password}></input>\r\n                                        </div>\r\n                                    </div>\r\n        \r\n                                    <div className=\"field is-grouped\">\r\n                                        <div className=\"control\">\r\n                                            <button type=\"submit\" className=\"button is-link\">Login</button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </form>\r\n                                <Link to=\"/register\">\r\n                                Click to Register\r\n                                </Link>\r\n                                </td>\r\n                            </tr>\r\n                        </table>\r\n\r\n                    </section>\r\n            )\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport logo from '../img/Logo1.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Register extends Component {\r\n  \r\n    state = {\r\n        newuser:'',\r\n        newpassword:'',\r\n        confirm: ''\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState( { [e.target.name]: e.target.value } );\r\n    }\r\n\r\n    //check username ว่าซ้ำไหม + check password & confirm password ว่ารงกันไหม -> ไม่ตรง alert'Error' : ตรง alert'success'\r\n    onSubmit = (e) => {\r\n        e.preventDefault()\r\n        \r\n        if (!this.state.newpassword || !this.state.confirm || !this.state.newuser) {\r\n            window.alert('Please fill data');\r\n            return false;\r\n        }else if(this.state.newpassword !== this.state.confirm){\r\n                window.alert('Passwords are not matching')\r\n                return false;\r\n        }else{\r\n            window.alert('Success, Please back to Login');\r\n            this.setState({\r\n                newuser:'',\r\n                newpassword:'',\r\n                confirm: ''\r\n            })\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n      return (\r\n            <section className=\"section container\">\r\n                    <table align=\"center\">\r\n                        <tr>\r\n                            <td align=\"center\" width=\"60%\">\r\n                                <img src={logo} alt=\"\" width=\"200\"/>\r\n                            </td>\r\n                            <td>\r\n                            <h1>Kin Rai - D </h1>\r\n                            <form id=\"register_form\" onSubmit={this.onSubmit}>\r\n                                \r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">New Username</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"text\" name=\"newuser\" onChange={this.onChange} value={this.state.newuser}></input>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">New Password</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"password\" name=\"newpassword\" onChange={this.onChange} value={this.state.newpassword}></input>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\" htmlFor=\"\">Confirm Password</label>\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input\" type=\"password\" name=\"confirm\" onChange={this.onChange} value={this.state.confirm}></input>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                                <div className=\"field is-grouped\">\r\n                                    <div className=\"control\">\r\n                                        <button type=\"submit\" className=\"button is-link\">Submit</button>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </form>\r\n                            <Link to=\"/KinRai-D/\">\r\n                                Back to Login\r\n                            </Link>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                </section>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {v4} from 'uuid';\nimport Login from './components/Login';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Register from './components/Register';\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <Router>\n      <div className=\"container mt-4 mb-5\">\n        <Route exact path=\"/KinRai-D/\" render={ props => (\n          <div>\n          <Login/>\n          </div>\n        )} />\n        <Route path=\"/register\" component={Register} />        \n      </div>\n      </Router>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}